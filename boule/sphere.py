"""
Define the reference sphere (ellipsoid with 0 flattening).
"""
import attr
import numpy as np

from . import Ellipsoid


# Don't let ellipsoid parameters be changed to avoid messing up calculations
# accidentally.
@attr.s(frozen=True)
class Sphere(Ellipsoid):
    """
    Reference sphere (ellipsoid with zero flattening).

    Represents a rotating ellipsoid with zero flattening. It is defined by
    three parameters and offers other derived quantities. **All attributes of
    this class are read-only and cannot be changed after instantiation.**

    All parameters are in SI units.

    The term "gravity" refers to the magnitude of gradient of the gravity
    potential (the sum of the gravitational and centrifugal potentials).

    .. note::

        Must be used instead of :class:`boule.Ellipsoid` to account for
        singularities due to zero flattening (and thus zero eccentricity) in
        the ellipsoid normal gravity calculations.

    Parameters
    ----------
    name : str
        A short name for the sphere, for example ``'Moon'``.
    radius : float
        The radius of the sphere [meters].
    geocentric_grav_const : float
        The geocentric gravitational constant (GM) [m^3 s^-2].
    angular_velocity : float
        The angular velocity of the rotating sphere (omega) [rad s^-1].
    long_name : str or None
        A long name for the sphere, for example ``"Moon Reference System"``
        (optional).
    reference : str or None
        Citation for the sphere parameter values (optional).

    Examples
    --------

    We can define a sphere by specifying the 3 key numerical parameters:

    >>> sphere = Sphere(
    ...     name="Moon",
    ...     long_name="That's no moon",
    ...     radius=1,
    ...     geocentric_grav_const=2,
    ...     angular_velocity=0.5,
    ... )
    >>> print(sphere) # doctest: +ELLIPSIS
    Sphere(name='Moon', ...)
    >>> print(sphere.long_name)
    That's no moon

    The class defines several derived attributes based on the input parameters:

    >>> print("{:.2f}".format(sphere.semimajor_axis))
    1.00
    >>> print("{:.2f}".format(sphere.semiminor_axis))
    1.00
    >>> print("{:.2f}".format(sphere.mean_radius))
    1.00
    >>> print("{:.2f}".format(sphere.flattening))
    0.00
    >>> print("{:.2f}".format(sphere.linear_eccentricity))
    0.00
    >>> print("{:.2f}".format(sphere.first_eccentricity))
    0.00
    >>> print("{:.2f}".format(sphere.second_eccentricity))
    0.00
    >>> print("{:.2f}".format(sphere.gravity_equator))
    1.75
    >>> print("{:.2f}".format(sphere.gravity_pole))
    2.00

    """

    name = attr.ib()
    radius = attr.ib()
    geocentric_grav_const = attr.ib()
    angular_velocity = attr.ib()
    long_name = attr.ib(default=None)
    reference = attr.ib(default=None)
    # semimajor_axis and flattening shouldn't be defined on initialization:
    #   - semimajor_axis will be equal to radius
    #   - flattening will be equal to zero
    semimajor_axis = attr.ib(init=False)
    flattening = attr.ib(init=False, default=0)

    @semimajor_axis.default
    def _set_semimajor_axis(self):
        "The semimajor axis should be the radius"
        return self.radius

    def normal_gravity(self, latitude, height):
        """
        Calculate normal gravity at any latitude and height.

        Computes the magnitude of the gradient of the gravity potential
        (gravitational + centrifugal) generated by the sphere at the given
        latitude and height (see [Heiskanen-Moritz]_).

        Parameters
        ----------
        latitude : float or array
            The latitude where the normal gravity will be computed (in
            degrees).
        height : float or array
            The height (above the surface of the sphere) of the computation
            point (in meters).

        Returns
        -------
        gamma : float or array
            The normal gravity in mGal.

        """
        # Convert from m/s² to mGal
        gamma = 1e5 * (
            self._gravitational_acceleration(height)
            + self._centrifugal_acceleration(latitude, height)
        )
        return gamma

    def _gravitational_acceleration(self, height):
        """
        The gravitational acceleration generated by a solid sphere.
        """
        return self.geocentric_grav_const / (self.radius + height) ** 2

    def _centrifugal_acceleration(self, latitude, height):
        """
        The centrifugal acceleration due to the rotation of the sphere.
        """
        return (
            -1
            * self.angular_velocity ** 2
            * (self.radius + height)
            * np.cos(np.radians(latitude))
        )

    @property
    def gravity_equator(self):
        """
        The norm of the gravity vector at the equator of the sphere [m/s²]
        """
        return (
            self.geocentric_grav_const / self.radius ** 2
            - self.radius * self.angular_velocity ** 2
        )

    @property
    def gravity_pole(self):
        """
        The norm of the gravity vector at the poles of the sphere [m/s²]
        """
        return self.geocentric_grav_const / self.radius ** 2
