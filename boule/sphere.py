"""
Module for defining and setting the reference sphere.
"""
import attr
import numpy as np


# Don't let ellipsoid parameters be changed to avoid messing up calculations
# accidentally.
@attr.s(frozen=True)
class Sphere:
    """
    Reference sphere.

    Implements the representation of ellipsoids with zero flattening as spheres.
    This is required since some computations can fail if the flattening is too small.

    All parameters are in SI units.

    Parameters
    ----------
    name : str
        A short name for the ellipsoid, for example ``'MOON'``.
    radius : float
        The radius of the sphere [meters].
    geocentric_grav_const : float
        The geocentric gravitational constant (GM) [m^3 s^-2].
    angular_velocity : float
        The angular velocity of the rotating ellipsoid (omega) [rad s^-1].
    long_name : str or None
        A long name for the ellipsoid, for example ``"Moon Reference System"``
        (optional).
    reference : str or None
        Citation for the ellipsoid parameter values (optional).

    Examples
    --------

    We can define a unit sphere:

    >>> sphere = Sphere(
    ...     name="sphere",
    ...     radius=1,
    ...     geocentric_grav_const=1,
    ...     angular_velocity=0,
    ... )
    >>> sphere.normal_gravity(latitude=0, height=1)
    0.25
    >>> sphere.normal_gravity(latitude=90, height=1)
    0.25
    """

    name = attr.ib()
    radius = attr.ib()
    geocentric_grav_const = attr.ib()
    angular_velocity = attr.ib()
    long_name = attr.ib(default=None)
    reference = attr.ib(default=None)

    @property
    def flattening(self):
        "Return zero flattening"
        return 0

    def normal_gravity(self, latitude, height):
        """
        Calculate normal gravity at any latitude and height

        Computes the magnitude of the gradient of the gravity potential
        (gravitational + centrifugal) generated by the sphere at the given
        latitude and height.

        Parameters
        ----------
        latitude : float or array
            The latitude where the normal gravity will be computed (in degrees).
        height : float or array
            The height (above the sphere) of computation point (in meters).

        Returns
        -------
        gamma : float or array
            The normal gravity in mGal.

        References
        ----------
        [Heiskanen-Moritz]_
        """
        return self._gravity_sphere(height) + self._centrifugal_force(latitude, height)

    def _gravity_sphere(self, height):
        """
        Calculate the gravity generated by a solid sphere
        """
        return self.geocentric_grav_const / (self.radius + height) ** 2

    def _centrifugal_force(self, latitude, height):
        """
        Calculate the centrifugal force due to the rotation of the sphere
        """
        return (
            (-1)
            * self.angular_velocity ** 2
            * (self.radius + height)
            * np.cos(np.radians(latitude))
        )
